-- Made By VerteN

local function Lick()
    local args = {[1] = "Roll2"}
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
    wait(0.05)
end

local function Sell()
    local args = {   [1] = "Sell2",  [2] = workspace:WaitForChild("Sells"):WaitForChild("Lobby")}
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
    wait(0.05)   
end

local Rebirths = {}

for i,v in next, game:GetService("Players").LocalPlayer.PlayerGui.Main.Surfaces.rebirthBoards:GetChildren() do
    if v:IsA("SurfaceGui") then
        local rebirth = v:FindFirstChild("RebirthBoard")
            table.insert(Rebirths, rebirth)
        end
    end

table.sort(Rebirths, function(a, b)
    return a < b
end)

local function Rebirth1()
    local args = {
        [1] = "rebirthBoard",
        [2] = 1,
        [3] = 1
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth2()
    local args = {
        [1] = "rebirthBoard",
        [2] = 1,
        [3] = 2
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth3()
    local args = {
        [1] = "rebirthBoard",
        [2] = 1,
        [3] = 3
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth4()
    local args = {
        [1] = "rebirthBoard",
        [2] = 1,
        [3] = 4
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth5()
    local args = {
        [1] = "rebirthBoard",
        [2] = 1,
        [3] = 5
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth6()
    local args = {
        [1] = "rebirthBoard",
        [2] = 2,
        [3] = 1
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth7()
    local args = {
        [1] = "rebirthBoard",
        [2] = 2,
        [3] = 2
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth8()
    local args = {
        [1] = "rebirthBoard",
        [2] = 2,
        [3] = 3
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth9()
    local args = {
        [1] = "rebirthBoard",
        [2] = 2,
        [3] = 4
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth10()
    local args = {
        [1] = "rebirthBoard",
        [2] = 2,
        [3] = 5
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth11()
    local args = {
        [1] = "rebirthBoard",
        [2] = 3,
        [3] = 1
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth12()
    local args = {
        [1] = "rebirthBoard",
        [2] = 3,
        [3] = 2
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth13()
    local args = {
        [1] = "rebirthBoard",
        [2] = 3,
        [3] = 3
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth14()
    local args = {
        [1] = "rebirthBoard",
        [2] = 3,
        [3] = 4
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth15()
    local args = {
        [1] = "rebirthBoard",
        [2] = 3,
        [3] = 5
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth16()
    local args = {
        [1] = "rebirthBoard",
        [2] = 4,
        [3] = 1
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth17()
    local args = {
        [1] = "rebirthBoard",
        [2] = 4,
        [3] = 2
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth18()
    local args = {
        [1] = "rebirthBoard",
        [2] = 4,
        [3] = 3
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth19()
    local args = {
        [1] = "rebirthBoard",
        [2] = 4,
        [3] = 4
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth20()
    local args = {
        [1] = "rebirthBoard",
        [2] = 4,
        [3] = 5
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth21()
    local args = {
        [1] = "rebirthBoard",
        [2] = 5,
        [3] = 1
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth22()
    local args = {
        [1] = "rebirthBoard",
        [2] = 5,
        [3] = 2
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth23()
    local args = {
        [1] = "rebirthBoard",
        [2] = 5,
        [3] = 3
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth24()
    local args = {
        [1] = "rebirthBoard",
        [2] = 5,
        [3] = 4
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth25()
    local args = {
        [1] = "rebirthBoard",
        [2] = 5,
        [3] = 5
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth26()
    local args = {
        [1] = "rebirthBoard",
        [2] = 6,
        [3] = 1
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth27()
    local args = {
        [1] = "rebirthBoard",
        [2] = 6,
        [3] = 2
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth28()
    local args = {
        [1] = "rebirthBoard",
        [2] = 6,
        [3] = 3
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth29()
    local args = {
        [1] = "rebirthBoard",
        [2] = 6,
        [3] = 4
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local function Rebirth30()
    local args = {
        [1] = "rebirthBoard",
        [2] = 6,
        [3] = 5
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))    
    wait(0.05)
end

local Eggs = {}

for i,v in next, workspace.Interactables.Eggs:GetChildren() do
    if v:IsA("Model") then
        table.insert(Eggs, v.Name)
    end
end

table.sort(Eggs, function(a,b)
    return a < b
end)

local function Hatch1()
    local args = {
        [1] = "Pet",
        [2] = "Egg",
        [3] = "Hatch",
        [4] = "Basic Egg",
        [5] = 3
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local function Hatch2()
local args = {
    [1] = "Pet",
    [2] = "Egg",
    [3] = "Hatch",
    [4] = "Novice Egg",
    [5] = 3
}
game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local function Hatch3()
    local args = {
        [1] = "Pet",
        [2] = "Egg",
        [3] = "Hatch",
        [4] = "Advanced Egg",
        [5] = 3
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args)) 
end

local function Hatch4()
    local args = {
        [1] = "Pet",
        [2] = "Egg",
        [3] = "Hatch",
        [4] = "Chocolate Egg",
        [5] = 3
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local function Hatch5()
    local args = {
        [1] = "Pet",
        [2] = "Egg",
        [3] = "Hatch",
        [4] = "Aqua Egg",
        [5] = 3
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local function Hatch6()
    local args = {
        [1] = "Pet",
        [2] = "Egg",
        [3] = "Hatch",
        [4] = "Magma Egg",
        [5] = 3
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local function Hatch7()
    local args = {
        [1] = "Pet",
        [2] = "Egg",
        [3] = "Hatch",
        [4] = "Galaxy Egg",
        [5] = 3
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local function Hatch8()
    local args = {
        [1] = "Pet",
        [2] = "Egg",
        [3] = "Hatch",
        [4] = "Toxic Egg",
        [5] = 3
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local function Hatch9()
    local args = {
        [1] = "Pet",
        [2] = "Egg",
        [3] = "Hatch",
        [4] = "Honey Egg",
        [5] = 3
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local function Hatch10()
    local args = {
        [1] = "Pet",
        [2] = "Egg",
        [3] = "Hatch",
        [4] = "Magic Egg",
        [5] = 3
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local function Hatch11()
    local args = {
        [1] = "Pet",
        [2] = "Egg",
        [3] = "Hatch",
        [4] = "Candy Egg",
        [5] = 3
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local function HatHatch1()
    local args = {
        [1] = "unbox",
        [2] = "Basic Hat",
        [3] = 3
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local function Gems()
    local plr = game.Players.LocalPlayer.Character.HumanoidRootPart
    for i, v in pairs(game:GetService("Workspace").Gems:GetDescendants()) do
    if v.name == "TouchInterest" and v.Parent then
    firetouchinterest(plr, v.Parent, 0)
    firetouchinterest(plr, v.Parent, 1)
    wait(0.05)
    end
end
end

local function BuyFlavor()
for i =1,200 do
game:GetService("ReplicatedStorage").Remote:FireServer("Shop","Item","Buy",i,"Tools")
end
end

local function BuyEnergy()
for i =1,200 do
game:GetService("ReplicatedStorage").Remote:FireServer("Shop","Energy","Buy",i)
end
end

local function BuyRanks()
for i =1,200 do
game:GetService("ReplicatedStorage").Remote:FireServer("Shop","Rank","Buy",i)
end
end

local function TeleportLobby()
    local args = {
        [1] = "Zone",
        [2] = "Travel",
        [3] = "Lobby"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local function TeleportChocolate()
    local args = {
        [1] = "Zone",
        [2] = "Travel",
        [3] = "Hot Chocolate"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local function TeleportAqua()
    local args = {
        [1] = "Zone",
        [2] = "Travel",
        [3] = "Aqua"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local function TeleportVulcano()
    local args = {
        [1] = "Zone",
        [2] = "Travel",
        [3] = "Vulcano"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local function TeleportGalaxy()
    local args = {
        [1] = "Zone",
        [2] = "Travel",
        [3] = "Galaxy"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local function TeleportRadioactive()
    local args = {
        [1] = "Zone",
        [2] = "Travel",
        [3] = "Radioactive"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local function TeleportHoney()
    local args = {
        [1] = "Zone",
        [2] = "Travel",
        [3] = "Honey"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local function TeleportMagic()
    local args = {
        [1] = "Zone",
        [2] = "Travel",
        [3] = "Magic"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local function TeleportCandy()
    local args = {
        [1] = "Zone",
        [2] = "Travel",
        [3] = "Candy"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local function ObbyToyClaim()
local args = {
    [1] = "obby",
    [2] = "ObbyToy"
}

game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local function ObbyCookieClaim()
    local args = {
        [1] = "obby",
        [2] = "ObbyCookie"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):FireServer(unpack(args))
end

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "🍧Ice Cream Clicker🍧",
    LoadingTitle = "Ice Cream Clicker",
    LoadingSubtitle = "by VerteN",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = VertHub, -- Create a custom folder for your hub/game
       FileName = "VertHub"
    },
    Discord = {
       Enabled = true,
       Invite = "eVJ3vFQs", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
    KeySystem = true, -- Set this to true to use our key system
    KeySettings = {
       Title = "Key",
       Subtitle = "Key System",
       Note = "Pastebin",
       FileName = "VertHubKey", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"VertHub19216217397"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })
local Tab = Window:CreateTab("Farming Tab", 4483362458)
Tab:CreateSection("Farming Section")

Tab:CreateToggle({
    Name = "Auto Lick",
    CurrentValue = false,
    Flag = "Auto Lick",
    Callback = function(x)
        shared["Auto Lick"] = x
        while shared["Auto Lick"] do
            task.wait(0.05)
            if not shared["Auto Lick"] then
                break
            end
            Lick()
        end
    end,
})

Tab:CreateToggle({
    Name = "Auto Sell",
    CurrentValue = false,
    Flag = "Auto Sell",
    Callback = function(x)
        shared["Auto Sell"] = x
        while shared["Auto Sell"] do
            task.wait(0.05)
            if not shared["Auto Sell"] then
                break
            end
            Sell()
        end
    end,
})

Tab:CreateToggle({
    Name = "Auto Gems",
    CurrentValue = false,
    Flag = "Auto Gems",
    Callback = function(x)
        shared["Auto Gems"] = x
        while shared["Auto Gems"] do
            task.wait(0.05)
            if not shared["Auto Gems"] then
                break
            end
            Gems()
        end
    end,
})

Tab:CreateToggle({
    Name = "Auto Buy Flavour",
    CurrentValue = false,
    Flag = "Auto Buy Flavour",
    Callback = function(x)
        shared["Auto Buy Flavour"] = x
        while shared["Auto Buy Flavour"] do
            task.wait(1)
            if not shared["Auto Buy Flavour"] then
                break
            end
            BuyFlavor()
        end
    end,
})

Tab:CreateToggle({
    Name = "Auto Buy Energy",
    CurrentValue = false,
    Flag = "Auto Buy Energy",
    Callback = function(x)
        shared["Auto Buy Energy"] = x
        while shared["Auto Buy Energy"] do
            task.wait(1)
            if not shared["Auto Buy Energy"] then
                break
            end
            BuyEnergy()
        end
    end,
})

Tab:CreateToggle({
    Name = "Auto Buy Ranks",
    CurrentValue = false,
    Flag = "Auto Buy Ranks",
    Callback = function(x)
        shared["Auto Buy Ranks"] = x
        while shared["Auto Buy Ranks"] do
            task.wait(1)
            if not shared["Auto Buy Ranks"] then
                break
            end
            BuyRanks()
        end
    end,
})

Tab:CreateToggle({
    Name = "Auto Claim Obby Cookie Rewards",
    CurrentValue = false,
    Flag = "Auto Claim Obby Cookie Rewards",
    Callback = function(x)
        shared["Auto Claim Obby Cookie Rewards"] = x
        while shared["Auto Claim Obby Cookie Rewards"] do
            task.wait(1)
            if not shared["Auto Claim Obby Cookie Rewards"] then
                break
            end
            ObbyCookieClaim()
        end
    end,
})

Tab:CreateToggle({
    Name = "Auto Claim Obby Toy Rewards",
    CurrentValue = false,
    Flag = "Auto Claim Obby Toy Rewards",
    Callback = function(x)
        shared["Auto Claim Obby Toy Rewards"] = x
        while shared["Auto Claim Obby Toy Rewards"] do
            task.wait(1)
            if not shared["Auto Claim Obby Toy Rewards"] then
                break
            end
            ObbyToyClaim()
        end
    end,
})

local Tab = Window:CreateTab("Hatching Tab", 4483362458)
Tab:CreateSection("Hatching Section")
 Tab:CreateToggle({
    Name = "Auto Open Basic Egg",
    CurrentValue = false,
    Flag = "Auto Open Basic Egg",
    Callback = function(x)
        shared["Auto Open Basic Egg"] = x
        while shared["Auto Open Basic Egg"] do
            task.wait(0.5)
            if not shared["Auto Open Basic Egg"] then
                break
            end
            Hatch1()
        end
    end,
})

 Tab:CreateToggle({
    Name = "Auto Open Novice Egg",
    CurrentValue = false,
    Flag = "Auto Open Novice Egg",
    Callback = function(x)
        shared["Auto Open Novice Egg"] = x
        while shared["Auto Open Novice Egg"] do
            task.wait(0.5)
            if not shared["Auto Open Novice Egg"] then
                break
            end
            Hatch2()
        end
    end,
})

 Tab:CreateToggle({
    Name = "Auto Open Advanced Egg",
    CurrentValue = false,
    Flag = "Auto Open Advanced Egg",
    Callback = function(x)
        shared["Auto Open Advanced Egg"] = x
        while shared["Auto Open Advanced Egg"] do
            task.wait(0.5)
            if not shared["Auto Open Advanced Egg"] then
                break
            end
            Hatch3()
        end
    end,
})

 Tab:CreateToggle({
    Name = "Auto Open Chocolate Egg",
    CurrentValue = false,
    Flag = "Auto Open Chocolate Egg",
    Callback = function(x)
        shared["Auto Open Chocolate Egg"] = x
        while shared["Auto Open Chocolate Egg"] do
            task.wait(0.5)
            if not shared["Auto Open Chocolate Egg"] then
                break
            end
            Hatch4()
        end
    end,
})

 Tab:CreateToggle({
    Name = "Auto Open Aqua Egg",
    CurrentValue = false,
    Flag = "Auto Open Aqua Egg",
    Callback = function(x)
        shared["Auto Open Aqua Egg"] = x
        while shared["Auto Open Aqua Egg"] do
            task.wait(0.5)
            if not shared["Auto Open Aqua Egg"] then
                break
            end
            Hatch5()
        end
    end,
})

 Tab:CreateToggle({
    Name = "Auto Open Magma Egg",
    CurrentValue = false,
    Flag = "Auto Open Magma Egg",
    Callback = function(x)
        shared["Auto Open Magma Egg"] = x
        while shared["Auto Open Magma Egg"] do
            task.wait(0.5)
            if not shared["Auto Open Magma Egg"] then
                break
            end
            Hatch6()
        end
    end,
})

 Tab:CreateToggle({
    Name = "Auto Open Galaxy Egg",
    CurrentValue = false,
    Flag = "Auto Open Galaxy Egg",
    Callback = function(x)
        shared["Auto Open Galaxy Egg"] = x
        while shared["Auto Open Galaxy Egg"] do
            task.wait(0.5)
            if not shared["Auto Open Galaxy Egg"] then
                break
            end
            Hatch7()
        end
    end,
})

 Tab:CreateToggle({
    Name = "Auto Open Toxic Egg",
    CurrentValue = false,
    Flag = "Auto Open Toxic Egg",
    Callback = function(x)
        shared["Auto Open Toxic Egg"] = x
        while shared["Auto Open Toxic Egg"] do
            task.wait(0.5)
            if not shared["Auto Open Toxic Egg"] then
                break
            end
            Hatch8()
        end
    end,
})

 Tab:CreateToggle({
    Name = "Auto Open Honey Egg",
    CurrentValue = false,
    Flag = "Auto Open Honey Egg",
    Callback = function(x)
        shared["Auto Open Honey Egg"] = x
        while shared["Auto Open Honey Egg"] do
            task.wait(0.5)
            if not shared["Auto Open Honey Egg"] then
                break
            end
            Hatch9()
        end
    end,
})

Tab:CreateToggle({
    Name = "Auto Open Magic Egg",
    CurrentValue = false,
    Flag = "Auto Open Magic Egg",
    Callback = function(x)
        shared["Auto Open Magic Egg"] = x
        while shared["Auto Open Magic Egg"] do
            task.wait(0.5)
            if not shared["Auto Open Magic Egg"] then
                break
            end
            Hatch10()
        end
    end,
})

Tab:CreateToggle({
    Name = "Auto Open Candy Egg",
    CurrentValue = false,
    Flag = "Auto Open Candy Egg",
    Callback = function(x)
        shared["Auto Open Candy Egg"] = x
        while shared["Auto Open Candy Egg"] do
            task.wait(0.5)
            if not shared["Auto Open Candy Egg"] then
                break
            end
            Hatch11()
        end
    end,
})

Tab:CreateSection("Hat Hatching Section")
Tab:CreateToggle({
    Name = "Auto Open Basic Hat",
    CurrentValue = false,
    Flag = "Auto Open Basic Hat",
    Callback = function(x)
        shared["Auto Open Basic Hat"] = x
        while shared["Auto Open Basic Hat"] do
            task.wait(0.5)
            if not shared["Auto Open Basic Hat"] then
                break
            end
            HatHatch1()
        end
    end,
})


local Tab = Window:CreateTab("Rebirth Tab", 4483362458)
Tab:CreateSection("Rebirth Section")
Tab:CreateToggle({
    Name = "Rebirth 1+",
    CurrentValue = false,
    Flag = "Rebirth 1",
    Callback = function(x)
        shared["Rebirth 1"] = x
        while shared["Rebirth 1"] do
            task.wait(0.05)
            if not shared["Rebirth 1"] then
                break
            end
            Rebirth1()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 5+",
    CurrentValue = false,
    Flag = "Rebirth 2",
    Callback = function(x)
        shared["Rebirth 2"] = x
        while shared["Rebirth 2"] do
            task.wait(0.05)
            if not shared["Rebirth 2"] then
                break
            end
            Rebirth2()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 10+",
    CurrentValue = false,
    Flag = "Rebirth 3",
    Callback = function(x)
        shared["Rebirth 3"] = x
        while shared["Rebirth 3"] do
            task.wait(0.05)
            if not shared["Rebirth 3"] then
                break
            end
            Rebirth3()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 25+",
    CurrentValue = false,
    Flag = "Rebirth 4",
    Callback = function(x)
        shared["Rebirth 4"] = x
        while shared["Rebirth 4"] do
            task.wait(0.05)
            if not shared["Rebirth 4"] then
                break
            end
            Rebirth4()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 50+",
    CurrentValue = false,
    Flag = "Rebirth 5",
    Callback = function(x)
        shared["Rebirth 5"] = x
        while shared["Rebirth 5"] do
            task.wait(0.05)
            if not shared["Rebirth 5"] then
                break
            end
            Rebirth5()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 100+",
    CurrentValue = false,
    Flag = "Rebirth 6",
    Callback = function(x)
        shared["Rebirth 6"] = x
        while shared["Rebirth 6"] do
            task.wait(0.05)
            if not shared["Rebirth 6"] then
                break
            end
            Rebirth6()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 250+",
    CurrentValue = false,
    Flag = "Rebirth 7",
    Callback = function(x)
        shared["Rebirth 7"] = x
        while shared["Rebirth 7"] do
            task.wait(0.05)
            if not shared["Rebirth 7"] then
                break
            end
            Rebirth7()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 500+",
    CurrentValue = false,
    Flag = "Rebirth 8",
    Callback = function(x)
        shared["Rebirth 8"] = x
        while shared["Rebirth 8"] do
            task.wait(0.05)
            if not shared["Rebirth 8"] then
                break
            end
            Rebirth8()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 1000+",
    CurrentValue = false,
    Flag = "Rebirth 9",
    Callback = function(x)
        shared["Rebirth 9"] = x
        while shared["Rebirth 9"] do
            task.wait(0.05)
            if not shared["Rebirth 9"] then
                break
            end
            Rebirth9()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 2500+",
    CurrentValue = false,
    Flag = "Rebirth 10",
    Callback = function(x)
        shared["Rebirth 10"] = x
        while shared["Rebirth 10"] do
            task.wait(0.05)
            if not shared["Rebirth 10"] then
                break
            end
            Rebirth10()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 5000+",
    CurrentValue = false,
    Flag = "Rebirth 11",
    Callback = function(x)
        shared["Rebirth 11"] = x
        while shared["Rebirth 11"] do
            task.wait(0.05)
            if not shared["Rebirth 11"] then
                break
            end
            Rebirth11()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 10000+",
    CurrentValue = false,
    Flag = "Rebirth 12",
    Callback = function(x)
        shared["Rebirth 12"] = x
        while shared["Rebirth 12"] do
            task.wait(0.05)
            if not shared["Rebirth 12"] then
                break
            end
            Rebirth12()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 25000+",
    CurrentValue = false,
    Flag = "Rebirth 13",
    Callback = function(x)
        shared["Rebirth 13"] = x
        while shared["Rebirth 13"] do
            task.wait(0.05)
            if not shared["Rebirth 13"] then
                break
            end
            Rebirth13()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 50000+",
    CurrentValue = false,
    Flag = "Rebirth 14",
    Callback = function(x)
        shared["Rebirth 14"] = x
        while shared["Rebirth 14"] do
            task.wait(0.05)
            if not shared["Rebirth 14"] then
                break
            end
            Rebirth14()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 100000+",
    CurrentValue = false,
    Flag = "Rebirth 15",
    Callback = function(x)
        shared["Rebirth 15"] = x
        while shared["Rebirth 15"] do
            task.wait(0.05)
            if not shared["Rebirth 15"] then
                break
            end
            Rebirth15()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 250000+",
    CurrentValue = false,
    Flag = "Rebirth 16",
    Callback = function(x)
        shared["Rebirth 16"] = x
        while shared["Rebirth 16"] do
            task.wait(0.05)
            if not shared["Rebirth 16"] then
                break
            end
            Rebirth16()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 500000+",
    CurrentValue = false,
    Flag = "Rebirth 17",
    Callback = function(x)
        shared["Rebirth 17"] = x
        while shared["Rebirth 17"] do
            task.wait(0.05)
            if not shared["Rebirth 17"] then
                break
            end
            Rebirth17()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 1000000+",
    CurrentValue = false,
    Flag = "Rebirth 18",
    Callback = function(x)
        shared["Rebirth 18"] = x
        while shared["Rebirth 18"] do
            task.wait(0.05)
            if not shared["Rebirth 18"] then
                break
            end
            Rebirth18()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 2500000+",
    CurrentValue = false,
    Flag = "Rebirth 19",
    Callback = function(x)
        shared["Rebirth 19"] = x
        while shared["Rebirth 19"] do
            task.wait(0.05)
            if not shared["Rebirth 19"] then
                break
            end
            Rebirth19()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 5000000+",
    CurrentValue = false,
    Flag = "Rebirth 20",
    Callback = function(x)
        shared["Rebirth 20"] = x
        while shared["Rebirth 20"] do
            task.wait(0.05)
            if not shared["Rebirth 20"] then
                break
            end
            Rebirth20()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 5000000+",
    CurrentValue = false,
    Flag = "Rebirth 21",
    Callback = function(x)
        shared["Rebirth 21"] = x
        while shared["Rebirth 21"] do
            task.wait(0.05)
            if not shared["Rebirth 21"] then
                break
            end
            Rebirth21()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 10000000+",
    CurrentValue = false,
    Flag = "Rebirth 22",
    Callback = function(x)
        shared["Rebirth 22"] = x
        while shared["Rebirth 22"] do
            task.wait(0.05)
            if not shared["Rebirth 22"] then
                break
            end
            Rebirth22()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 15000000+",
    CurrentValue = false,
    Flag = "Rebirth 23",
    Callback = function(x)
        shared["Rebirth 23"] = x
        while shared["Rebirth 23"] do
            task.wait(0.05)
            if not shared["Rebirth 23"] then
                break
            end
            Rebirth23()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 20000000+",
    CurrentValue = false,
    Flag = "Rebirth 24",
    Callback = function(x)
        shared["Rebirth 24"] = x
        while shared["Rebirth 24"] do
            task.wait(0.05)
            if not shared["Rebirth 24"] then
                break
            end
            Rebirth24()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 25000000+",
    CurrentValue = false,
    Flag = "Rebirth 25",
    Callback = function(x)
        shared["Rebirth 25"] = x
        while shared["Rebirth 25"] do
            task.wait(0.05)
            if not shared["Rebirth 25"] then
                break
            end
            Rebirth25()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 25000000+",
    CurrentValue = false,
    Flag = "Rebirth 26",
    Callback = function(x)
        shared["Rebirth 26"] = x
        while shared["Rebirth 26"] do
            task.wait(0.05)
            if not shared["Rebirth 26"] then
                break
            end
            Rebirth26()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 75000000+",
    CurrentValue = false,
    Flag = "Rebirth 27",
    Callback = function(x)
        shared["Rebirth 27"] = x
        while shared["Rebirth 27"] do
            task.wait(0.05)
            if not shared["Rebirth 27"] then
                break
            end
            Rebirth27()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 100000000+",
    CurrentValue = false,
    Flag = "Rebirth 28",
    Callback = function(x)
        shared["Rebirth 28"] = x
        while shared["Rebirth 28"] do
            task.wait(0.05)
            if not shared["Rebirth 28"] then
                break
            end
            Rebirth28()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 150000000+",
    CurrentValue = false,
    Flag = "Rebirth 29",
    Callback = function(x)
        shared["Rebirth 29"] = x
        while shared["Rebirth 29"] do
            task.wait(0.05)
            if not shared["Rebirth 29"] then
                break
            end
            Rebirth29()
        end
    end,
})

Tab:CreateToggle({
    Name = "Rebirth 200000000+",
    CurrentValue = false,
    Flag = "Rebirth 30",
    Callback = function(x)
        shared["Rebirth 30"] = x
        while shared["Rebirth 30"] do
            task.wait(0.05)
            if not shared["Rebirth 30"] then
                break
            end
            Rebirth30()
        end
    end,
})



local Tab = Window:CreateTab("Teleport Tab", 4483362458)
local Button = Tab:CreateButton({
    Name = "Teleport Spawn",
    Callback = function()
        TeleportLobby()
    end,
})

local Button = Tab:CreateButton({
    Name = "Teleport Chocolate",
    Callback = function()
        TeleportChocolate()
    end,
})

local Button = Tab:CreateButton({
    Name = "Teleport Aqua",
    Callback = function()
        TeleportAqua()
    end,
})

local Button = Tab:CreateButton({
    Name = "Teleport Vulcano",
    Callback = function()
        TeleportVulcano()
    end,
})

local Button = Tab:CreateButton({
    Name = "Teleport Galaxy",
    Callback = function()
        TeleportGalaxy()
    end,
})

local Button = Tab:CreateButton({
    Name = "Teleport Radioactive",
    Callback = function()
        TeleportRadioactive()
    end,
})

local Button = Tab:CreateButton({
    Name = "Teleport Honey",
    Callback = function()
        TeleportHoney()
    end,
})

local Button = Tab:CreateButton({
    Name = "Teleport Magic",
    Callback = function()
        TeleportMagic()
    end,
})

local Button = Tab:CreateButton({
    Name = "Teleport Candy",
    Callback = function()
        TeleportCandy()
    end,
})

local Tab = Window:CreateTab("LocalPlayer", 4483362458) -- Title, Image
Tab:CreateSlider({
    Name = "Walk Speed",
    Range = {0, 250},
    Increment = 1,
    Suffix = "WS",
    CurrentValue = 22,
    Flag = "Slider2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
    end,
})
local Button = Tab:CreateButton({
    Name = "Infinite yield",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
    end,
})
